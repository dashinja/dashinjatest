"Note","Course","Module","Clip","Time in Clip","URL"
"Constructor Funcions","JavaScript Objects and Prototypes","Creating JavaScript Objects","Using Constructor Functions to Create JavaScript Objects","3:28","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m1&clip=4&mode=live&start=208.85716&noteid=0888b85d-862e-420d-9e27-480deff9a057"
"Class Construction of object Method","JavaScript Objects and Prototypes","Creating JavaScript Objects","Using ECMAScript 6 Classes to Create JavaScript Objects","0:34","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m1&clip=6&mode=live&start=34.962042&noteid=76614622-d7b5-4a66-8e45-5e1494a084e9"
"Alternative bracket notation to dot notation","JavaScript Objects and Prototypes","JavaScript Object Properties","Using Bracket Notation to Access JavaScript Properties","0:14","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=1&mode=live&start=14.61063&noteid=4d397588-e7d2-4e4a-833e-e5d446422842"
"Every propery has a Property Descriptor used to see the attributes of that property","JavaScript Objects and Prototypes","JavaScript Object Properties","Using JavaScript Property Descriptors","0:00","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=2&mode=live&start=0.494001&noteid=eed34a5c-c247-46df-b33f-7a1f15136528"
"Property Descriptor SYNTAX:\nObject.getOwnPropertyDescriptor(objName, 'property')","JavaScript Objects and Prototypes","JavaScript Object Properties","Using JavaScript Property Descriptors","0:27","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=2&mode=live&start=27.650298&noteid=7f6d5db9-8141-4b3b-9fcc-7cf8d0842472"
"Define Property SYNTAX:\nObject.defineProperty(obj, 'prop', {propertydescriptoryourwant: boolean})","JavaScript Objects and Prototypes","JavaScript Object Properties","Using the Writable Attribute","0:19","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=3&mode=live&start=19.54604&noteid=7a667b9e-3556-4325-800e-8287d5386188"
"Always Use 'use strict';  mode!!","JavaScript Objects and Prototypes","JavaScript Object Properties","Using the Writable Attribute","0:38","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=3&mode=live&start=38.011252&noteid=13fe0758-1237-4b1a-b9a2-a66e52136401"
"This is important. \nthe name property is just a pointer... and when you make it read-only only the pointer does not change.\n\nInstead, you need ""Object.freeze(cat.name"" example","JavaScript Objects and Prototypes","JavaScript Object Properties","Using the Writable Attribute","1:43","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=3&mode=live&start=103.712812&noteid=0c22131d-1b7a-42f3-813f-64c08d8ae460"
"So if you have created a property, and you do not want it to be writable, yet you have made a property that has the value of an OBJECT, you'll need to FREEZE the object as well, such that it is not writable.","JavaScript Objects and Prototypes","JavaScript Object Properties","Using the Writable Attribute","2:07","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=3&mode=live&start=127.242484&noteid=26a429c0-3447-46d5-bcca-7c3bbbd34ad5"
"Properties with ""enumberable"" as true, means they can be 'looped over' with a for...in loop.\n\nfor...in Loop SYNTAX:\nfor (var prop in obj) {\nwhat you want to show\n(i.e.) display(prop + ': ' + obj[prop]\n}","JavaScript Objects and Prototypes","JavaScript Object Properties","Using the Enumerable Attribute","0:55","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=4&mode=live&start=55.517523&noteid=fb9c8da7-5733-480c-bc41-a558b168b907"
"Changing Enumerability Property SYNTAX:\nObject.defineProperty(obj, 'prop', {propertydescriptoryouwanttochange: boolean})","JavaScript Objects and Prototypes","JavaScript Object Properties","Using the Enumerable Attribute","0:59","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=4&mode=live&start=59.388375&noteid=5ba37e28-a883-4fc4-baa4-1a9a159c4511"
"Object Keys SYNTAX:\nObject.keys(obj)","JavaScript Objects and Prototypes","JavaScript Object Properties","Using the Enumerable Attribute","1:23","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=4&mode=live&start=83.998745&noteid=871b37f6-d88b-4416-962c-89c2d8b65645"
"Setting enumerable to false makes it so that:\nThe property is not shown in Object.keys, nor is it displayed in the ""for...in"" loop, and finally --->\nit will affect JSON serialization of the object by not serializing it via JSON.Stringify(obj) <-- so you won't have non-enumerable properties in your JSON.","JavaScript Objects and Prototypes","JavaScript Object Properties","Using the Enumerable Attribute","1:45","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=4&mode=live&start=105.683054&noteid=2270b22f-0541-4371-9445-5184c7b1aae0"
"You can still view non-enumerable properties via dot or bracket notation.","JavaScript Objects and Prototypes","JavaScript Object Properties","Using the Enumerable Attribute","2:18","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=4&mode=live&start=138.004652&noteid=b350d9ed-94f6-469c-9e4d-f51ece1bb323"
"If you have made a property non-configurable you cannot later in the code make the property configurable again.\n\nYou CAN however later in the code: change the writable property without throwing an error in 'use strict;'","JavaScript Objects and Prototypes","JavaScript Object Properties","Using the Configurable Attribute","0:43","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=5&mode=live&start=43.744321&noteid=987c2691-a068-4cd3-9fdd-19a92d2dbe9b"
"Changing configurable to false also disallows the property in question to be deleted.","JavaScript Objects and Prototypes","JavaScript Object Properties","Using the Configurable Attribute","1:04","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=5&mode=live&start=64.653584&noteid=4ccde72c-e3da-4956-9475-84a9df2b5677"
"Recap non-configurable consequences:\n1 - Cannot change enumerable attribute\n2 - Cannot change configurable attribute\n3 - Cannot delete the property\n\nYou CAN however change the property's writable attribute.","JavaScript Objects and Prototypes","JavaScript Object Properties","Using the Configurable Attribute","1:26","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=5&mode=live&start=86.143118&noteid=3b3c0dc5-d5d4-4933-806d-68e1e4b030fc"
"Use Getters to define a new property that you control the return value for.\n\nGetter SYNTAX (study):\nObject.defineProperty(obj, 'newpropertyyouwant', {\nget: function() {\nreturn 'whatever expression you want here'\n}\n})\n","JavaScript Objects and Prototypes","JavaScript Object Properties","Using Getters and Setters","0:44","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=6&mode=live&start=44.825459&noteid=c1d4391d-bb4a-4f7c-b03f-c1132001ba72"
"Use Setters to define how to distribute property changes based on setting the values of a property you created with a Getter.\n\nSetter Syntax (study):\nObject.defineProperty(obj, 'newpropertyyouwant', {\nget: function() {\nreturn 'whatever expression you want here'\n}, //<--- THIS COMMA IS IMPORTANT\nset: function() {\n//whatever you want to set, here\n})","JavaScript Objects and Prototypes","JavaScript Object Properties","Using Getters and Setters","1:13","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m2&clip=6&mode=live&start=73.626735&noteid=945dd719-782c-4949-8119-705fd398a4f7"
"Why you would used a prototype Example","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Getting Started with JavaScript Prototypes","0:05","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=1&mode=live&start=5.723887&noteid=91521517-bbc8-4b23-9fa1-d704c958702b"
"Array Objects Prototype SYNTAX\nObject.defineProperty(Array.prototype, 'propertynameyouwanttocreatebyget', {get: function() { return 'whateveryouwanthere' }})","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Getting Started with JavaScript Prototypes","1:11","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=1&mode=live&start=71.910958&noteid=74f35bbf-0dc0-41a1-abad-ca136777ebc5"
"A prototype is an object that exists on EVERY function in javascript.","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","What Is a Prototype?","0:03","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=2&mode=live&start=3.603862&noteid=7780217b-1212-4633-b4d6-a05f1a77fde2"
"Hence, functions have a prototype property that is an empty object.\n\ni.e.\n\nvar myFunc = function() {}\nconsole.log(myFunc.prototype)\n{} <--- console.log output\n","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","What Is a Prototype?","0:15","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=2&mode=live&start=15.16074&noteid=082d0573-4ce4-4fdb-97ba-b4feb4e05d7c"
"Functions have prototype property.\nObjects DO NOT HAVE prototype property.","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","What Is a Prototype?","0:20","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=2&mode=live&start=20.429269&noteid=8b040b46-9487-4c3c-ad83-16de5d8eef04"
"Objects DO have a __proto__ property.\n\nIMPORTANT:\n__proto__ <-- that is TWO underscores on EACH side of proto\n\nThis is the Objects prototype as it were.\n\n_proto_   and  .prototype  are used differently.","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","What Is a Prototype?","0:34","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=2&mode=live&start=34.55757&noteid=d340afa1-482c-48a0-b007-417cb988991c"
"Readable Function prototype vs Object Prototype","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","What Is a Prototype?","0:59","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=2&mode=live&start=59.212529&noteid=004e1f82-3694-4046-804c-14838506f4bc"
"the word INSTANCE in these definitions is to be noted.\n\nA prototype is NOT like a class, a prototype is ACTUALLY an OBJECT.\n\nSo when a function is created, it gets a prototype OBJECT created and attached to that function behind the scenes.\n\nIf THAT function is then used as a Constructor function with the 'new' keyword, the object that that function creates will have a ._proto_ property that points to the same object which is   .prototype property of the function that created it.\n","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","What Is a Prototype?","1:26","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=2&mode=live&start=86.222634&noteid=ea75c526-edd9-4877-80d0-6583f3dbcbe7"
"Prior to setting fluffy object's age directly, the fluffy object does not have a .age property, only its __proto__ does.","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Instance vs. Prototype Properties","1:16","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=3&mode=live&start=76.533703&noteid=b3fc3dce-f4b0-4e35-a45c-a5581e7e25b3"
"What's Really Going On: Prototypes...\nJavascript asks object for a property, if the object does not have that property specified, then javascript asks that property's prototype a.k.a. its .__proto__","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Instance vs. Prototype Properties","1:51","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=3&mode=live&start=111.022495&noteid=f0822e24-4f61-4baa-ae4f-a642aa6928e4"
".hasOwnProperty SYNTAX","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Instance vs. Prototype Properties","2:00","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=3&mode=live&start=120.587633&noteid=297cb8f8-c839-4b65-8c2a-315534886e03"
"Important:\nIf you ask an object for the value of one of its properties - just because you get a result does not mean that OBJECT has the property necessarily. It could be that that object's __proto__ or some other object in it's prototype chain has that value set for a property that does not otherwise exist on the object itself.","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Instance vs. Prototype Properties","2:39","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=3&mode=live&start=159.068265&noteid=f1f9c3db-4c2d-4e4e-a2cc-f77146ed0b48"
"Further, all that was said about properties and inheritance are indeed:\nTRUE about Functions ON an object also.\n\nBecause functions really are just another property of the object.","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Instance vs. Prototype Properties","2:51","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=3&mode=live&start=171.13109&noteid=950787df-cc37-4d63-86da-1b8d29aeaf84"
"INSTANCE Properties:\ndefine properties assigned by the params pased to the function constructor when the New keyword is called to create the object of a given function.\n\nInstance Properties VALUES are unique to the new object, but the properties themselves are defined in the function constructor.","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","A Graphical Overview of Prototypes","1:33","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=4&mode=live&start=93.395103&noteid=777ebefc-f997-48bb-9dac-925395e3a549"
"Instance properties OVERRIDE the Prototype Properties","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","A Graphical Overview of Prototypes","2:31","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=4&mode=live&start=151.867666&noteid=772df3f3-67df-4384-bcad-884de5d828ab"
"Prototypes really are objects that live in memory and behave like any other objects with regards to pointers.","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Changing a Function's Prototype","1:56","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=5&mode=live&start=116.069801&noteid=e0a1ba13-fd1c-4ef4-a744-0cd8f25b6c74"
"Top level in prototype chain is null.","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Multiple Levels of Inheritance","0:32","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=6&mode=live&start=32.902105&noteid=527527b9-df31-4fe2-a550-3217b61374df"
"in Javascript, all Objects inherit from the Object and Object has no prototypes.","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Multiple Levels of Inheritance","0:43","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=6&mode=live&start=43.443981&noteid=cd5e6e88-07f1-4483-803d-8698bb2b1c84"
"Assigning prototype inheritance chain SYNTAX\n\nfunctionName.prototype = Object.create(functionNameYouWantToInheritFrom.prototype)","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Creating Your Own Prototypal Inheritance Chains","0:35","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=7&mode=live&start=35.030641&noteid=c7d283c1-b589-49b8-b2c2-300ec30bc02f"
"Why Object.create vs. 'New' ?\nexample:\nCat.prototype = Object.create(Animal.prototype)\n\nThis sets Animal as the prototype for Cat. Cat inherits from the Animal Prototype.\n\nObject.Create will not CALL the Animal function, it is just going to set that function as the prototype and setup the prototoype chain.","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Creating Your Own Prototypal Inheritance Chains","0:57","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=7&mode=live&start=57.751093&noteid=063cf767-6d88-4127-a9ec-b4d0a2347d39"
"Calling the Animal Constructor FROM WITHIN our Cat Constructor - so if anything needs to happen to Initialize an animal upon construction, it will be taken care of.\n\nThat is done like this: SYNTAX\n\nAnimal.call(this)","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Creating Your Own Prototypal Inheritance Chains","1:21","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=7&mode=live&start=81.664751&noteid=1903dda3-6e07-4ea0-aa4f-a9ad6bed03aa"
"So that will call the Animal function, passing in Cat Object being constructed, ","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Creating Your Own Prototypal Inheritance Chains","1:36","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=7&mode=live&start=96.36135&noteid=4e7c9a3e-8633-4d27-b891-ec99cf63e9bb"
"'instanceof' Operator\n\nNOTE!  it is all lowercase\nCorrect: \ninstanceof\n\nWRONG:\ninstanceOf\nInstanceOf\nInstanceof\netc. ","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Creating Your Own Prototypal Inheritance Chains","2:54","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=7&mode=live&start=174.76657&noteid=d236c2b0-a64f-43c4-98f9-5816a405e4b5"
"Setting what you want your constructor to be SYNTAX: (example):\n\nCat.prototype.constructor = Cat\n","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Creating Your Own Prototypal Inheritance Chains","3:11","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=7&mode=live&start=191.630062&noteid=bacc4b09-ab46-483f-8055-a03589c0580c"
"Focus on These Three Lines!","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Creating Your Own Prototypal Inheritance Chains","3:38","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=7&mode=live&start=218.586406&noteid=84795e05-288d-40cc-bb3f-69cd2ac4389e"
"Define:\nExtends <-- what you use to setup your inheritance chain\nand\nsuper <-- calls its parent's class' constructor\n\n","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Creating Prototypes with Classes","1:06","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=8&mode=live&start=66.901593&noteid=e82ece62-28a0-4283-831d-0374fe9e3794"
"LEARN CLASS way of doing this... so much classier, cleaner, and clear...\nless typing too...","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Creating Prototypes with Classes","1:42","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=8&mode=live&start=102.565944&noteid=e3efef4e-79ae-4256-b1e3-454a6febc1a4"
"Members of classes are NOT enumerable by default!","JavaScript Objects and Prototypes","JavaScript Prototypes and Inheritance","Creating Prototypes with Classes","2:49","https://app.pluralsight.com/player?course=javascript-objects-prototypes&author=jim-cooper&name=javascript-objects-prototypes-m3&clip=8&mode=live&start=169.383266&noteid=95e6c76e-8608-417d-a93e-cb747c72f5ed"